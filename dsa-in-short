1. Count Sum of pairs where arrya is sorted and elements can repeat - 
    Two pointers and/or hashmap, to select 2 elements from 'x' number  elements use nc2 which is x(x-1)/2

2. Linked list find cycle
    a. take slow fast pointer, when pointers meet at X, then from X go to next using pointer P and from head go to next using pointer H, 
    the point where P and H meet is the cycle start
    Linked List questions are best done if you draw it on paper first. complexity is mostly O(n)
    b. Take hashmap, store addresses in hashmap. when addrss repeats that is the cycle point



3. Longest paliandromic substring - for each element - take two pointers and spread out those pointers from middle to left and right
     till the characters at  pointers match

4. Linked list reverse

5. Link list find intersection - first for a cycle from last point of link list, then solve it like the cyclic LL question

6. sum of two elements should be equal to B - two pointers from left and right in sorted array, or use hashmap and do not need sorted array then

7. Level order traversal - use queue

8. Print each level order in seperate line - use queue, keep count of nodes when removing fro queue

9. Left view of tree - All first eleents of level order

10. right view of tree - All last eleents of Level order

11. vertical order traversal  - use level order traversal, create map , mark root as 0, go to left mark parent-1, go to right mark parent+1

12. Tree traversal - use recursion or iteratevly use stack

13. Create tree from inorder and postorder - use recursion (hard)





